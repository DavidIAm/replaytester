
var Emitter = require('./lib/MantaEventEmitter');
var Rabbit = require('./lib/MantaRabbitMQ');
var SchemaMgr = require('./lib/MantaSchemaMgr');
var Schema = require('./lib/MantaJsonSchema');
var Fetcher = require('./lib/snarfConfig');

var configAgent = new Fetcher();

function EventSystem () {
}
module.exports = EventSystem;
EventSystem.Rabbit = Rabbit;
EventSystem.SchemaMgr = SchemaMgr;
EventSystem.Schema = Schema;
EventSystem.Fetcher = Fetcher;
EventSystem.Emitter = Emitter;

EventSystem.prototype.Rabbit = function (url, callback) {
	this.getConfig(url, function (err, rabconf) { 
			if (err) return callback(err);
			if (! rabconf ) return callback( "no data returned for url " + url );
			new Rabbit(rabconf, callback);
		} );
};
EventSystem.prototype.SchemaMgr = function (url, callback) {
	this.getConfig(url, function (err, schemaconfig) { 
			if (err) return callback(err);
			if (! schemaconfig ) return callback( "no data returned for url " + url );
			new SchemaMgr(schemaconfig, callback);
		} );
};
EventSystem.prototype.Emitter = function (rabbit, schemaMgr, url, callback) {
	if (!callback) throw "callback is required!";
	this.getConfig(url, function (err, emitterCfg) { 
		if (err) return callback( err );
		if (! emitterCfg ) return callback( "no data returned for url " + url );
		callback(null,
			new Emitter(
				{ rabbit: rabbit
				, schemaMgr: schemaMgr
				, exchange: emitterCfg.exchange
				, routingKey: emitterCfg.routingKey
				} ) 
			); 
	} );
};

// load configuration 
EventSystem.prototype.getConfig = configAgent.getJSON;


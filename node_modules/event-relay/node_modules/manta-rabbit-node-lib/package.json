{
  "name": "manta-rabbit-node-lib",
  "description": "Manta rabbitmq node library",
  "main": "index.js",
  "author": {
    "name": "Manta Media"
  },
  "version": "0.1.1-15",
  "repository": {
    "type": "svn",
    "url": "http://github/manta/manta-rabbit-node-lib"
  },
  "bugs": {
    "url": "http://trac/trac/main/query?col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&keywords=~manta-rabbit-node-lib&order=priority"
  },
  "licenses": [
    {
      "type": "MANTA",
      "url": "http://manta.com/dont/steal/our/stuff"
    }
  ],
  "dependencies": {
    "amqp": "*",
    "async": "*",
    "json-schema": "*",
    "node-uuid": "*"
  },
  "devDependencies": {
    "jasmine-node": "<= 1.0.22"
  },
  "scripts": {
    "update": "npm pack ; ls *.tgz | tail --lines=1 | xargs -iDDD cp DDD event-relay-latest.tgz",
    "test": "jasmine-node tests"
  },
  "publishConfig": {
    "registry": "http://localhost:8241"
  },
  "readme": "# manta-rabbit-node-lib\n\nThis is an abstraction making it easy to communicate with our rabbitmq servers.\n\n## Installation\n\nnpm install manta-rabbit-node-lib\n\n## Synopsis\n\nThe simplest possible interface to create and send a MantaEvent\n\n```javascript\n\nvar Emitter = require('manta-rabbit-node-lib');\nvar sender = new Emitter(\n\t\t{ exchange: \"MantaEventTransitional\"\n\t\t, routingKey: \"testing\"\n\t\t} );\n\n// simple form, send eventType and payload as hash\nvar ack = function () { console.warn(\"did emit\"); }\nsender.envelope\n\t( { eventType: 'QueryTimer', payload: {md5: '...', milliseconds:123456 }, actor: { id: 'dog', type:'canine'} }\n\t, function (mantaevent) { mantaevent.emit(); ack(); } \n\t);\n\n// also can specify payload separately.\nvar ack = function () { console.warn(\"did emit\"); }\nsender.message\n\t( 'QueryTimer'\n\t, { md5: '...', milliseconds: 123456 }\n\t, function (message) {\n\t\t\tsender.envelope\n\t\t\t\t( { payload: message, actor: { id: 'dog', type:'canine'} }\n\t\t\t\t, function (mantaevent) {\n\t\t\t\t\t\tmantaevent.emit();\n\t\t\t\t\t\tack();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t);\n\n\n```\n\n## Synopsis\n\nThis uses the event based interface, allowing you to dynamically add queues and exchanges as needed \n\n```javascript\nvar Rabbit = require('manta-rabbit-node-lib/lib/RabbitMQ');\n\n// basic operation\nvar rabbit = new Rabbit( { connection: { options: { url: 'amqp://user@pass@localhost:5672/' } } } );\n\nrabbit.on('ready', function (rabbit) {\n\t\trabbit.exchange( { name: 'MyEventExchange' } );\n\t} );\n\nrabbit.on('exchangeReady', function (exchange) {\n\trabbit.queue( \n\t\t{ name: 'MyQueueName'\n\t\t, bindings: [ { routing_key: 'key', exchange: 'MyEventExchange' } ]\n\t\t} );\n\t} );\n\nrabbit.on('queueReady', function (queue) {\n\t\trabbit.emit('MyEventExchange', 'rkey', {a:\"This is a message\"});\n\t} );\n\nrabbit.on('MyQueueName', function (message, headers, deliveryInfo) { \n\t\tconsole.log(deliveryInfo.routing_key + '> ' + message.a) \n\t\trabbit.allDone();\n\t} );\n\n```\n\nwould output:\n\nrkey> This is a message\n\nThe supplied deliveryInfo looks like this:\n\n```javascript\n{ contentType: 'application/json'\n, queue: 'MyQueueName'\n, deliveryTag: 1\n, redelivered: false\n, exchange: 'MyEventExchange'\n, routingKey: 'key'\n, consumerTag: 'node-amqp-30383-0.9582679294981062' \n}\n```\n\n## Details\n\nExample with every possible option enumerated\n\n```javascript\n\nvar rabbit = new Rabbit(\n\t{ connection:\n\t\t{ options: \n\t\t\t{ url: 'amqp://user@pass@localhost:5672/' // OR the below options\n\t\t\t, host: 'localhost'\n\t\t\t, port: 5672\n\t\t\t, login: 'user'\n\t\t\t, password: 'pass'\n\t\t\t, vhost: '/'\n\t\t\t}\n\t\t, implOptions: \n\t\t\t{ defaultExchangeName: 'myDefault'\n\t\t\t, routingKeyInPayload: false\n\t\t\t, deliveryTagInPayload: false\n\t\t\t, reconnect: true\n\t\t\t, reconnectBackoffStrategy: ['linear','exponential'][0]\n\t\t\t, reconnectExponentialLimit: 120000 // ms\n\t\t\t, reconnectBackoffTime: 1000 // ms\n\t\t\t}\n\t\t}\n\t, exchanges:\n\t\t[ { name: 'MyEventExchange'\n\t\t\t, type: ['direct','fanout','topic'][2]\n\t\t\t, passive: false\n\t\t\t, durable: false\n\t\t\t, autoDelete: false\n\t\t\t, confirm: false // ack|error event on publish OR callback called\n\t\t\t}\n\t\t]\n\t, queues:\n\t\t[ { name: 'MyQueueName'\n\t\t\t, bindings:\n\t\t\t\t[ { routing_key: 'ARoutingKey'\n\t\t\t\t\t, exchange: 'AnExchange'\n\t\t\t\t\t}\n\t\t\t\t, { routing_key: 'AnotherKey'\n\t\t\t\t\t, exchange: 'AnExchange'\n\t\t\t\t\t}\n\t\t\t\t, { routing_key: 'AnotherKey'\n\t\t\t\t\t, exchange: 'OtherExchange'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t, passive: false\n\t\t\t, durable: false\n\t\t\t, exclusive: false\n\t\t\t, autoDelete: true\n\t\t\t, noDeclare: false\n\t\t\t, arguments: { } // additional arguments for create?\n\t\t\t, closeChannelOnUnsubscribe: false\n\t\t\t, subscribeOptions:\n\t\t\t\t{ ack: false // as fast as they come in \n\t\t\t\t\t\t\t\t\t\t// - call queue.shift in listenCallback to enable \n\t\t\t\t\t\t\t\t\t\t// next delivery if true\n\t\t\t\t, prefetchCount: 1 // how many to get before an ack is sent (0 unlimited)\n\t\t\t\t, \n\t\t\t\t}\n\t\t\t, listenCallback: \n\t\t\t\tfunction (message, headers, deliveryInfo, queue, rabbit) { \n\t\t\t\t\t// message - the message received\n\t\t\t\t\t// headers - hash of the headers of the message\n\t\t\t\t\t// deliveryInfo - hash of delivery information indicated above\n\t\t\t\t\t// queue - the queue object - use for .shift() in ack:true mode\n\t\t\t\t\t// rabbit - our object, in case you want to emit on it\n\t\t\t\t\t// Do something with the received messages here\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t} , function (error, rabbit) {\n\t\t\trabbit.emit \n\t\t\t\t( 'MyEventExchange'\n\t\t\t\t, \"myRoutingKey\"\n\t\t\t\t, { message: \"here\" }\n\t\t\t\t, { mandatory: false\n\t\t\t\t\t, immediate: false\n\t\t\t\t\t, contentType: 'application/octet-stream'\n\t\t\t\t\t, contentEncoding: null\n\t\t\t\t\t, headers: { header: \"value\" }\n\t\t\t\t\t, deliveryMode: {nonpersistant:1,persistant:2}.nonpersistant\n\t\t\t\t\t, priority: 5 // 0-9\n\t\t\t\t\t, replyTo: 'myReplyQueue'\n\t\t\t\t\t}\n\t\t\t\t, function (booleanError) {\n\t\t  \t\t\t// called when exchange in confirm mode\n\t\t\t\t\t}\n\t\t\t\t);\n\t} );\n\n```\n",
  "_id": "manta-rabbit-node-lib@0.1.1-15",
  "dist": {
    "shasum": "d6e8ad196cf9defc23e8d061bedfc8e29f3aa724"
  },
  "_from": "manta-rabbit-node-lib@git+ssh://git@github.com:mantacode/manta-rabbit-node-lib.git"
}

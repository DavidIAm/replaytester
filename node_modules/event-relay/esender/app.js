/**
 * Module dependencies.
 */

var express = require('express')
  , util = require('util')
  , routes = require('./routes')
  , Config = require('./config_getter.js')
  , Validator = require('./jsonvalidator.js')
  , uuider = require('node-uuid')
  , http = require('http')
  , path = require('path')
	, events = require('events')
	, health = require('./health_checker.js')
	, os = require('os')
	, fs = require('fs')
	, EventSystem = require('manta-rabbit-node-lib')
//	, Identifier = require('./tokenvalidator.js')
	;

var argv = require('optimist')
	.usage('Start a web service.\nUsage $0')
	.demand('l')
	.alias('l', 'loggerpath')
	.describe('lp', 'Logger path')
	.argv;

var app = express();
var check = new health();
var rabbit;
var identify = function () { return true; };

app.configure(function(){
  app.set('port', process.env.NODE_PORT || process.env.PORT || 3003);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.logger({stream:getLoggerStream(), format:getLoggerFormat()}));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(path.join(__dirname, 'public')));
});

app.configure('development', function(){
  app.use(express.errorHandler());
});
var setaccess = function (req, res) {
		res.set('Access-Control-Allow-Origin', '*');
		res.set('Access-Control-Allow-Methods', 'POST, GET, PUT');
		res.set('Access-Control-Max-Age', 10000);
		res.set('Access-Control-Allow-Headers', '*');
	};

var validator = new Validator;

var config = new Config;
config.on
	( 'schemaFile'
	, function (file, validate) {
			validator.loadSchemaFile(file, validate);
		}
	);

//config.on( 'secret' , function (secret) {
//	identify = new Identifier(secret).identify;
//});

config.on
	( 'exchange'
	, function(exchdef) { setTimeout(function () { rabbit.emit('Rabbit_Declare_Exchange', exchdef); }, 1000); }
	);

config.on
	( 'rabbit'
	, function(rabdef) { rabbit = new EventSystem.Rabbit(rabdef); 

	app.put('/exchange', function (req, res, next) {
			try {
				validator.validate
					( 'exchangedef'
					, req.body
					, function (err) {
							if (err) console.log("VALIDATE ERROR", err);
							if (err) return res.status(400).send(err);
							rabbit.emit('Rabbit_Declare_Exchange', req.body, function (error) {
								if (error) return res.status(400).send(error);
								res.status(202).send({ url: '/'+req.body.name, exchange: req.body });
							});
						}
					);
			} catch(e) {
				if (err) return res.status(500).send(e);
			}
		} );

rabbit.on('exchangeReady', function (exchange, exchdef) {

	app.options
		( '/'+exchdef.name
		, function ( req, res, next ) {
				setaccess(req, res);
				next();
			}
		);

	app.post
		('/'+exchdef.name
		, function(req, res) {
				if (!req.body.actor) {
					console.log("PROBLEM WITH RECEIVED BODY");
					console.log(util.inspect(req.headers));
					console.log(util.inspect(req.body));
					return res.status(400).send({err:"no decoded body - maybe wrong content type? (expect application/json)", headers:req.headers, body:req.body});
				}
				if ('eventTimestamp' in req.body) {
				} else {
					req.body.eventTimestamp = new Date().getTime();
				}
				if ('uuid' in req.body) { } else {
					req.body.uuid = uuider.v4();
				}
				if ('hostname' in req.body) { } else {
					req.body.hostname = 'event_relay@'+os.hostname();
				}

				var routingKey = req.headers.routingkey || exchdef.routingKey;
				if (! routingKey ) {
					console.log("error - no default routing key defined and no RoutingKey header supplied");
					return res.status(400).send([{err:"problem with routing key, when there is no exchange default you must send a RoutingKey header with a valid routing key", exchange: exchdef, headers: req.headers }]);
				}
				// make sure the body is valid
				validator.validate
					( 'MantaEvent'
					, req.body
					, function (error) {
							if (error) {
								console.log('mainvalidate error ' + JSON.stringify(error) + "( main : " + JSON.stringify(req.body) + " )");
								return res.status(400).send(error);
							}
							// make sure the payload is valid
							//console.log("got payload of type " + req.body.eventType + ":" + req.body.payload);
							validator.validate
								( req.body.eventType
								, JSON.parse(req.body.payload ? req.body.payload : '{}')
								, function (error) {
										if (error) {
											console.log('subvalidate error ' + JSON.stringify(error) + "( payload : " + req.body.payload + ")");
											return res.status(400).send(error);
										}
										//console.log('publishing to exchange ' + exchdef.name + ' routing key ' + req.headers.routingkey + ' if not ' + exchdef.routingKey );
										rabbit.emit
											( exchdef.name
											, routingKey
											, req.body
											, { mandatory: true // to queue
												, immediate: true // to consumer
												, contentType: 'application/json'
												}
											);
										res.status(202).send([{valid:true,eventTimestamp:req.body.eventTimestamp,uuid:req.body.uuid}]);
									}
								);
						}
					);
			}
		);
} );

rabbit.on('error', function ( exchanges, queues, exception ) {
		exchanges.each( function (exchange_definition) {
			console.log("publisher sent error for " + JSON.stringify(exchange_definition) + " with exception " + JSON.stringify( exception ) );
			if (app.routes.post == null) { app.routes.post = []; }
			app.routes.post = app.routes.post.filter(function(ele){return ele.path != '/'+exchange_definition.name});
			check.emit('mqstate', exception);
			check.emit('exchangeState', exchange_definition.name, exception);
			nextTick( function () { config.emit('exchange', exchange_definition); }, 250 );
		} );
	} );


} );

config.readFile('config.json');

app.get('/', routes.index);

app.get('/health-check', check.displayStatus);

validator.schemata.exchangedef =
	{ type: "object"
	, name: "exchangedef"
	, properties:
		{ "name":
			{ type: "string"
			, "required": true
			}
		, "type":
			{ type: "string"
			, "enum": [ "topic", "direct", "header", "fanout" ]
			, "required": true
			}
		, "passive":
			{ type: "boolean"
			, "required": true
			}
		, "durable":
			{ type: "boolean"
			, "required": true
			}
		, "autoDelete":
			{ type: "boolean"
			, "required": true
			}
		}
	};


http.createServer(app).listen
	( app.get('port')
	, function() {
			console.log("Express server listening on port " + app.get('port'));
		}
	);

function getLoggerStream() {
	return fs.createWriteStream(argv.l + '/access.log', {flags:'a'});
};
function getLoggerFormat() {
	var format = ':remote-addr - ":req[x-forwarded-for]" - :res[x-response-time] - [:date] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"';
	return format;
};

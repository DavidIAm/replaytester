// basic imports
var events = require('events');
var fs = require('fs');
var myvalidator = require('json-schema');
var roottype = {};

var schemavalidate = myvalidator.validate;

// for us to do a require later
module.exports = validator;

function validator() {
		events.EventEmitter.call(this);
}

// inherit events.EventEmitter
validator.super_ = events.EventEmitter;
validator.prototype = Object.create(events.EventEmitter.prototype, {
		constructor: {
				value: validator,
				enumerable: false
		}
});

validator.prototype.schemata = { JsonSchema: {} };

validator.prototype.loadSchemaFile = function ( file, dontvalidate ) {
	var self = this;
	fs.readFile(file,function(err,data) {
		if(err) throw err;
		// Load data file
		var schema = JSON.parse(data);
		var schemaName = schema.name;
		if (typeof schema.name == "undefined") {
			schemaName = file.substr(file.lastIndexOf('/')+1);
			schemaName = schemaName.substr(0, schemaName.lastIndexOf('.schema'));
		}
		
		// validate the schema
		if ( ! dontvalidate ) {
			var result = self.validate 
				( 'JsonSchema' 
				, schema
				, function (error) {
						if (error) {
							throw "invalid json schema ("+file+")! " + JSON.stringify(error) 
						}
						// store rules
						self.schemata[schemaName] = schema;
					}
				)
		} else {
			console.log("not validating "+file);
		}
	});
};

validator.prototype.validate = function ( type, data, callback ) {
	var self = this;
	if (type && !this.schemata[type]) {
		callback([{message:"no such data type " + type + " defined, cannot validate"}]);
	} else if (type) {
		var result = schemavalidate( data, self.schemata[type] );
		if (! result.valid) {
			callback(result.errors);
		}
	}
	callback();
};


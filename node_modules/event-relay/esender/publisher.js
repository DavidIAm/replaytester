// basic imports
var events = require('events');
var fs = require('fs');
var amqp = require('amqp');

// for us to do a require later
module.exports = publisher;

function publisher() {
    events.EventEmitter.call(this);
}

// inherit events.EventEmitter
publisher.super_ = events.EventEmitter;
publisher.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: publisher,
        enumerable: false
    }
});

publisher.prototype.exchange = function ( exchange_definition, exchangeCallback ) {
	var self = this;
	console.log('configuring exchange ' + exchange_definition.name);
	self.connection
		( exchange_definition.url, function ( error, connection ) {
				if (error) {
					return self.emit('error', exchange_definition, error);
				}
				connection.exchange
					( exchange_definition.name
					, { type: exchange_definition.type
						, passive: exchange_definition.passive
						, durable: exchange_definition.durable
						, autoDelete: exchange_definition.auto_delete
						}
					, function ( exchange ) {
							self.emit('ready', exchange_definition.name);
							exchange.publish
								( 'infrastructure.eventsender'
								, JSON.stringify({"event":"Event Sender Relay Online","exchange":exchange_definition.name})
								, { mandatory: false // to queue
									, immediate: false // to consumer
									, contentType: 'application/json'
									}
								);
							self.emit('exchangeChange', exchange_definition.name, 'ok');
							connection.on('close', function ( had_error ) { 
									self.emit( 'exchangeChange', exchange_definition.name, 'down');
									if (! had_error) {
										self.emit( 'error', exchange_definition, 'closed quietly' );
									}
								});
							exchangeCallback( exchange );
						}
					);
			}
		);
}

publisher.prototype.connection = function ( url, callback ) {
	var self = this;
//var conn = amqp.createConnection({url:'amqp://192.168.240.231'});
//	var conn = amqp.createConnection({url:'amqp://ecnext74.ecnext.com'});
	var conn = amqp.createConnection({url:url});
	conn.on
		( 'close'
		, function(had_error) {
				self.emit('close', had_error);
			}
		);
	conn.on
		( 'error'
		, function(exception) {
				callback(exception);
			}
		);
	conn.on
		( 'ready'
		, function ( ) {
				self.emit('open', this);
				callback(null, this);
			} 
		);
}

